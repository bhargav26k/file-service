// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.0
//   protoc               v3.20.3
// source: file.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import {
  type CallOptions,
  ChannelCredentials,
  Client,
  type ClientOptions,
  type ClientUnaryCall,
  type handleUnaryCall,
  makeGenericClientConstructor,
  Metadata,
  type ServiceError,
  type UntypedServiceImplementation,
} from "@grpc/grpc-js";

export const protobufPackage = "file";

export interface UploadFileRequest {
  category: string;
  filename: string;
  data: Uint8Array;
}

export interface UploadFileResponse {
  fileId: number;
  url: string;
}

export interface CategoryRequest {
  category: string;
}

export interface DeleteFileRequest {
  fileId: number;
}

export interface FileMeta {
  fileId: number;
  category: string;
  filename: string;
  url: string;
  createdAt: string;
}

export interface FileListResponse {
  files: FileMeta[];
}

export interface OperationStatus {
  success: boolean;
  message: string;
}

function createBaseUploadFileRequest(): UploadFileRequest {
  return { category: "", filename: "", data: new Uint8Array(0) };
}

export const UploadFileRequest: MessageFns<UploadFileRequest> = {
  encode(message: UploadFileRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.category !== "") {
      writer.uint32(10).string(message.category);
    }
    if (message.filename !== "") {
      writer.uint32(18).string(message.filename);
    }
    if (message.data.length !== 0) {
      writer.uint32(26).bytes(message.data);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UploadFileRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUploadFileRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.category = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.filename = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.data = reader.bytes();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UploadFileRequest {
    return {
      category: isSet(object.category) ? globalThis.String(object.category) : "",
      filename: isSet(object.filename) ? globalThis.String(object.filename) : "",
      data: isSet(object.data) ? bytesFromBase64(object.data) : new Uint8Array(0),
    };
  },

  toJSON(message: UploadFileRequest): unknown {
    const obj: any = {};
    if (message.category !== "") {
      obj.category = message.category;
    }
    if (message.filename !== "") {
      obj.filename = message.filename;
    }
    if (message.data.length !== 0) {
      obj.data = base64FromBytes(message.data);
    }
    return obj;
  },

  create(base?: DeepPartial<UploadFileRequest>): UploadFileRequest {
    return UploadFileRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<UploadFileRequest>): UploadFileRequest {
    const message = createBaseUploadFileRequest();
    message.category = object.category ?? "";
    message.filename = object.filename ?? "";
    message.data = object.data ?? new Uint8Array(0);
    return message;
  },
};

function createBaseUploadFileResponse(): UploadFileResponse {
  return { fileId: 0, url: "" };
}

export const UploadFileResponse: MessageFns<UploadFileResponse> = {
  encode(message: UploadFileResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.fileId !== 0) {
      writer.uint32(8).int32(message.fileId);
    }
    if (message.url !== "") {
      writer.uint32(18).string(message.url);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UploadFileResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUploadFileResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.fileId = reader.int32();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.url = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UploadFileResponse {
    return {
      fileId: isSet(object.fileId) ? globalThis.Number(object.fileId) : 0,
      url: isSet(object.url) ? globalThis.String(object.url) : "",
    };
  },

  toJSON(message: UploadFileResponse): unknown {
    const obj: any = {};
    if (message.fileId !== 0) {
      obj.fileId = Math.round(message.fileId);
    }
    if (message.url !== "") {
      obj.url = message.url;
    }
    return obj;
  },

  create(base?: DeepPartial<UploadFileResponse>): UploadFileResponse {
    return UploadFileResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<UploadFileResponse>): UploadFileResponse {
    const message = createBaseUploadFileResponse();
    message.fileId = object.fileId ?? 0;
    message.url = object.url ?? "";
    return message;
  },
};

function createBaseCategoryRequest(): CategoryRequest {
  return { category: "" };
}

export const CategoryRequest: MessageFns<CategoryRequest> = {
  encode(message: CategoryRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.category !== "") {
      writer.uint32(10).string(message.category);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CategoryRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCategoryRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.category = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CategoryRequest {
    return { category: isSet(object.category) ? globalThis.String(object.category) : "" };
  },

  toJSON(message: CategoryRequest): unknown {
    const obj: any = {};
    if (message.category !== "") {
      obj.category = message.category;
    }
    return obj;
  },

  create(base?: DeepPartial<CategoryRequest>): CategoryRequest {
    return CategoryRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CategoryRequest>): CategoryRequest {
    const message = createBaseCategoryRequest();
    message.category = object.category ?? "";
    return message;
  },
};

function createBaseDeleteFileRequest(): DeleteFileRequest {
  return { fileId: 0 };
}

export const DeleteFileRequest: MessageFns<DeleteFileRequest> = {
  encode(message: DeleteFileRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.fileId !== 0) {
      writer.uint32(8).int32(message.fileId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DeleteFileRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeleteFileRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.fileId = reader.int32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DeleteFileRequest {
    return { fileId: isSet(object.fileId) ? globalThis.Number(object.fileId) : 0 };
  },

  toJSON(message: DeleteFileRequest): unknown {
    const obj: any = {};
    if (message.fileId !== 0) {
      obj.fileId = Math.round(message.fileId);
    }
    return obj;
  },

  create(base?: DeepPartial<DeleteFileRequest>): DeleteFileRequest {
    return DeleteFileRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<DeleteFileRequest>): DeleteFileRequest {
    const message = createBaseDeleteFileRequest();
    message.fileId = object.fileId ?? 0;
    return message;
  },
};

function createBaseFileMeta(): FileMeta {
  return { fileId: 0, category: "", filename: "", url: "", createdAt: "" };
}

export const FileMeta: MessageFns<FileMeta> = {
  encode(message: FileMeta, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.fileId !== 0) {
      writer.uint32(8).int32(message.fileId);
    }
    if (message.category !== "") {
      writer.uint32(18).string(message.category);
    }
    if (message.filename !== "") {
      writer.uint32(26).string(message.filename);
    }
    if (message.url !== "") {
      writer.uint32(34).string(message.url);
    }
    if (message.createdAt !== "") {
      writer.uint32(42).string(message.createdAt);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): FileMeta {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseFileMeta();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.fileId = reader.int32();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.category = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.filename = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.url = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.createdAt = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): FileMeta {
    return {
      fileId: isSet(object.fileId) ? globalThis.Number(object.fileId) : 0,
      category: isSet(object.category) ? globalThis.String(object.category) : "",
      filename: isSet(object.filename) ? globalThis.String(object.filename) : "",
      url: isSet(object.url) ? globalThis.String(object.url) : "",
      createdAt: isSet(object.createdAt) ? globalThis.String(object.createdAt) : "",
    };
  },

  toJSON(message: FileMeta): unknown {
    const obj: any = {};
    if (message.fileId !== 0) {
      obj.fileId = Math.round(message.fileId);
    }
    if (message.category !== "") {
      obj.category = message.category;
    }
    if (message.filename !== "") {
      obj.filename = message.filename;
    }
    if (message.url !== "") {
      obj.url = message.url;
    }
    if (message.createdAt !== "") {
      obj.createdAt = message.createdAt;
    }
    return obj;
  },

  create(base?: DeepPartial<FileMeta>): FileMeta {
    return FileMeta.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<FileMeta>): FileMeta {
    const message = createBaseFileMeta();
    message.fileId = object.fileId ?? 0;
    message.category = object.category ?? "";
    message.filename = object.filename ?? "";
    message.url = object.url ?? "";
    message.createdAt = object.createdAt ?? "";
    return message;
  },
};

function createBaseFileListResponse(): FileListResponse {
  return { files: [] };
}

export const FileListResponse: MessageFns<FileListResponse> = {
  encode(message: FileListResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.files) {
      FileMeta.encode(v!, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): FileListResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseFileListResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.files.push(FileMeta.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): FileListResponse {
    return { files: globalThis.Array.isArray(object?.files) ? object.files.map((e: any) => FileMeta.fromJSON(e)) : [] };
  },

  toJSON(message: FileListResponse): unknown {
    const obj: any = {};
    if (message.files?.length) {
      obj.files = message.files.map((e) => FileMeta.toJSON(e));
    }
    return obj;
  },

  create(base?: DeepPartial<FileListResponse>): FileListResponse {
    return FileListResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<FileListResponse>): FileListResponse {
    const message = createBaseFileListResponse();
    message.files = object.files?.map((e) => FileMeta.fromPartial(e)) || [];
    return message;
  },
};

function createBaseOperationStatus(): OperationStatus {
  return { success: false, message: "" };
}

export const OperationStatus: MessageFns<OperationStatus> = {
  encode(message: OperationStatus, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.success !== false) {
      writer.uint32(8).bool(message.success);
    }
    if (message.message !== "") {
      writer.uint32(18).string(message.message);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): OperationStatus {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseOperationStatus();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.success = reader.bool();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.message = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): OperationStatus {
    return {
      success: isSet(object.success) ? globalThis.Boolean(object.success) : false,
      message: isSet(object.message) ? globalThis.String(object.message) : "",
    };
  },

  toJSON(message: OperationStatus): unknown {
    const obj: any = {};
    if (message.success !== false) {
      obj.success = message.success;
    }
    if (message.message !== "") {
      obj.message = message.message;
    }
    return obj;
  },

  create(base?: DeepPartial<OperationStatus>): OperationStatus {
    return OperationStatus.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<OperationStatus>): OperationStatus {
    const message = createBaseOperationStatus();
    message.success = object.success ?? false;
    message.message = object.message ?? "";
    return message;
  },
};

export type FileServiceService = typeof FileServiceService;
export const FileServiceService = {
  uploadFile: {
    path: "/file.FileService/UploadFile",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: UploadFileRequest) => Buffer.from(UploadFileRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => UploadFileRequest.decode(value),
    responseSerialize: (value: UploadFileResponse) => Buffer.from(UploadFileResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer) => UploadFileResponse.decode(value),
  },
  listFilesByCategory: {
    path: "/file.FileService/ListFilesByCategory",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: CategoryRequest) => Buffer.from(CategoryRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => CategoryRequest.decode(value),
    responseSerialize: (value: FileListResponse) => Buffer.from(FileListResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer) => FileListResponse.decode(value),
  },
  deleteFile: {
    path: "/file.FileService/DeleteFile",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: DeleteFileRequest) => Buffer.from(DeleteFileRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => DeleteFileRequest.decode(value),
    responseSerialize: (value: OperationStatus) => Buffer.from(OperationStatus.encode(value).finish()),
    responseDeserialize: (value: Buffer) => OperationStatus.decode(value),
  },
} as const;

export interface FileServiceServer extends UntypedServiceImplementation {
  uploadFile: handleUnaryCall<UploadFileRequest, UploadFileResponse>;
  listFilesByCategory: handleUnaryCall<CategoryRequest, FileListResponse>;
  deleteFile: handleUnaryCall<DeleteFileRequest, OperationStatus>;
}

export interface FileServiceClient extends Client {
  uploadFile(
    request: UploadFileRequest,
    callback: (error: ServiceError | null, response: UploadFileResponse) => void,
  ): ClientUnaryCall;
  uploadFile(
    request: UploadFileRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: UploadFileResponse) => void,
  ): ClientUnaryCall;
  uploadFile(
    request: UploadFileRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: UploadFileResponse) => void,
  ): ClientUnaryCall;
  listFilesByCategory(
    request: CategoryRequest,
    callback: (error: ServiceError | null, response: FileListResponse) => void,
  ): ClientUnaryCall;
  listFilesByCategory(
    request: CategoryRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: FileListResponse) => void,
  ): ClientUnaryCall;
  listFilesByCategory(
    request: CategoryRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: FileListResponse) => void,
  ): ClientUnaryCall;
  deleteFile(
    request: DeleteFileRequest,
    callback: (error: ServiceError | null, response: OperationStatus) => void,
  ): ClientUnaryCall;
  deleteFile(
    request: DeleteFileRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: OperationStatus) => void,
  ): ClientUnaryCall;
  deleteFile(
    request: DeleteFileRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: OperationStatus) => void,
  ): ClientUnaryCall;
}

export const FileServiceClient = makeGenericClientConstructor(FileServiceService, "file.FileService") as unknown as {
  new (address: string, credentials: ChannelCredentials, options?: Partial<ClientOptions>): FileServiceClient;
  service: typeof FileServiceService;
  serviceName: string;
};

function bytesFromBase64(b64: string): Uint8Array {
  if ((globalThis as any).Buffer) {
    return Uint8Array.from(globalThis.Buffer.from(b64, "base64"));
  } else {
    const bin = globalThis.atob(b64);
    const arr = new Uint8Array(bin.length);
    for (let i = 0; i < bin.length; ++i) {
      arr[i] = bin.charCodeAt(i);
    }
    return arr;
  }
}

function base64FromBytes(arr: Uint8Array): string {
  if ((globalThis as any).Buffer) {
    return globalThis.Buffer.from(arr).toString("base64");
  } else {
    const bin: string[] = [];
    arr.forEach((byte) => {
      bin.push(globalThis.String.fromCharCode(byte));
    });
    return globalThis.btoa(bin.join(""));
  }
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
